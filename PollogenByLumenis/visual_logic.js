/**
 * Generated by Verge3D Puzzles v.3.7.1
 * Fri Jul 30 2021 17:13:47 GMT+0400 (+04)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = true;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  registerSetTimeout(0.5, function() {
    setHTMLElemStyle('display', 'none', 'progress_bar', true);
    setHTMLElemStyle('display', 'block', 'fullscreen-open', true);
    setHTMLElemStyle('display', 'block', 'logoProjects', true);
    setHTMLElemStyle('display', 'block', 'info_button', true);
  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var AnnotationStatus, infoStatus;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}



function setScreenScale(factor) {
    appInstance.renderer.setPixelRatio(factor);
    // to update possible post-processing passes
    appInstance.onResize();
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}



// removeHTMLElement puzzle
function removeHTMLElement(id, isParent) {

    var elem = getElement(id, isParent);
    // COMPAT: compatible with IE11
    if (elem && elem.parentNode)
        elem.parentNode.removeChild(elem);

}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var hasSkinning = firstSubmesh.isSkinnedMesh;
            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasSkinning || hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasSkinning) {
                    newMat.skinning = true;
                }

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}



setHTMLElemStyle('cursor', 'pointer', 'an1', true);
setHTMLElemStyle('cursor', 'pointer', 'an2', true);
setHTMLElemStyle('cursor', 'pointer', 'an3', true);

eventHTMLElem('click', 'info_button', true, function(event) {
  setHTMLElemStyle('display', 'block', 'info_block', true);
  setHTMLElemStyle('display', 'none', 'info_button', true);
  setHTMLElemStyle('display', 'block', 'info_button2', true);
});
eventHTMLElem('click', 'closeAnnotation2', true, function(event) {
  setHTMLElemStyle('display', 'none', 'info_block', true);
  setHTMLElemStyle('display', 'none', 'info_button2', true);
  setHTMLElemStyle('display', 'block', 'info_button', true);
});

registerOnHover('Text.001', false, function() {
  setHTMLElemStyle('cursor', 'pointer', ['BODY'], true);
}, function() {
  setHTMLElemStyle('cursor', 'default', ['BODY'], false);
});


operateAnimation('STOP', 'Sun', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Sun.001', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Sun.002', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Sun.003', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Area_inside', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Desire_low', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Empty_intro', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Text.001', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Windscreen_circleNote.1', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Windscreen_circleNote.2', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'Windscreen_circleNote.3', null, null, 'AUTO', 1,
        function() {}, undefined, false);


operateAnimation('STOP', 'sphere_studio', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    setMaterialValue('Verge3D_Environment_World.001', 'Intencity', 0);

AnnotationStatus = 0;
infoStatus = 0;

changeVis('Plane.001', false);
changeVis('circle1', false);
changeVis('circle2', false);
changeVis('circle3', false);

if (featureAvailable('RETINA')) {
  setScreenScale(window.devicePixelRatio);
}

registerOnClick('Text.001', false, false, [0,1,2], function() {}, function() {});

eventHTMLElem('click', 'emptyDiv', true, function(event) {
  bloom(0.65, 0.25, 0);
  removeHTMLElement('emptyDiv', true);
  assignMat('Desire_low.003', 'plastic.light');

  operateAnimation('PLAY', 'sphere_studio', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Text.001', null, null, 'LoopOnce', 1,
          function() {
    setMaterialValue('Verge3D_Environment_World.001', 'Intencity', 0.3);
  }, undefined, false);


  operateAnimation('PLAY', 'Sun', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Sun.001', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Sun.003', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Sun.002', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Empty_intro', 0, 160, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', 'Desire_low', null, null, 'LoopOnce', 1,
          function() {
    changeVis('Text.001', false);
    removeHTMLElement('emptyDiv2', true);
    handleAnnot(true, '', 'annotation1', '', 'an1');
    setHTMLElemStyle('zIndex', '999', 'an1', false);
    handleAnnot(true, '', 'annotation2', '', 'an2');
    setHTMLElemStyle('zIndex', '999', 'an2', false);
    handleAnnot(true, '', 'annotation3', '', 'an3');
    setHTMLElemStyle('zIndex', '999', 'an3', false);
    eventHTMLElem('click', 'an3', false, function(event) {
      tweenCamera('Camera.positon3', 'Empty_for_an3', 1, function() {

        operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                function() {
          AnnotationStatus = 3;
        }, undefined, false);

            }, 0);
      handleAnnot(false, '', 'annotation3', '', '');
      handleAnnot(false, '', 'annotation2', '', '');
      handleAnnot(false, '', 'annotation1', '', '');
    });
    registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
      if (AnnotationStatus == 3) {

        operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            tweenCamera('positionStay', 'Empty_intro', 1, function() {}, 0);
        handleAnnot(true, '', 'annotation1', '', 'an1');
        handleAnnot(true, '', 'annotation2', '', 'an2');
        handleAnnot(true, '', 'annotation3', '', 'an3');
        eventHTMLElem('click', 'an3', false, function(event) {
          tweenCamera('Camera.positon3', 'Empty_for_an3', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 3;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an2', false, function(event) {
          tweenCamera('positon2_2', 'Empty_intro', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 2;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an1', false, function(event) {
          tweenCamera('positon1_1', 'Empty_for_an1', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 1;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        AnnotationStatus = 0;

        operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            }
    }, function() {});
    eventHTMLElem('click', 'an2', false, function(event) {
      tweenCamera('positon2_2', 'Empty_intro', 1, function() {

        operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                function() {
          AnnotationStatus = 2;
        }, undefined, false);

            }, 0);
      handleAnnot(false, '', 'annotation3', '', '');
      handleAnnot(false, '', 'annotation2', '', '');
      handleAnnot(false, '', 'annotation1', '', '');
    });
    registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
      if (AnnotationStatus == 2) {

        operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            tweenCamera('positionStay', 'Empty_intro', 1, function() {}, 0);
        handleAnnot(true, '', 'annotation1', '', 'an1');
        handleAnnot(true, '', 'annotation2', '', 'an2');
        handleAnnot(true, '', 'annotation3', '', 'an3');
        eventHTMLElem('click', 'an3', false, function(event) {
          tweenCamera('Camera.positon3', 'Empty_for_an3', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 3;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an2', false, function(event) {
          tweenCamera('positon2_2', 'Empty_intro', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 2;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an1', false, function(event) {
          tweenCamera('positon1_1', 'Empty_for_an1', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 1;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        AnnotationStatus = 0;

        operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            }
    }, function() {});
    eventHTMLElem('click', 'an1', false, function(event) {
      tweenCamera('positon1_1', 'Empty_for_an1', 1, function() {

        operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                function() {
          AnnotationStatus = 1;
        }, undefined, false);

            }, 0);
      handleAnnot(false, '', 'annotation3', '', '');
      handleAnnot(false, '', 'annotation2', '', '');
      handleAnnot(false, '', 'annotation1', '', '');
    });
    registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
      if (AnnotationStatus == 1) {

        operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            tweenCamera('positionStay', 'Empty_intro', 1, function() {}, 0);
        handleAnnot(true, '', 'annotation1', '', 'an1');
        handleAnnot(true, '', 'annotation2', '', 'an2');
        handleAnnot(true, '', 'annotation3', '', 'an3');
        eventHTMLElem('click', 'an3', false, function(event) {
          tweenCamera('Camera.positon3', 'Empty_for_an3', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.3', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 3;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an2', false, function(event) {
          tweenCamera('positon2_2', 'Empty_intro', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.2', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 2;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        eventHTMLElem('click', 'an1', false, function(event) {
          tweenCamera('positon1_1', 'Empty_for_an1', 1, function() {

            operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                    function() {
              AnnotationStatus = 1;
            }, undefined, false);

                }, 0);
          handleAnnot(false, '', 'annotation3', '', '');
          handleAnnot(false, '', 'annotation2', '', '');
          handleAnnot(false, '', 'annotation1', '', '');
        });
        AnnotationStatus = 0;

        operateAnimation('PLAY', 'Windscreen_circleNote.1', 0, 50, 'LoopOnce', 1,
                function() {}, undefined, true);

            }
    }, function() {});
  }, undefined, false);

      });



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
