{"version":3,"sources":["Navigation.tsx","Marker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","cameraPosition","useThree","camera","position","set","Marker","selectedItemIndex","opacityMachine1","name","id","opacity","color","onMarkerClicked","Html","style","className","onClick","extend","EffectComposer","RenderPass","OutlinePass","ShaderPass","initialCameraPos","initialControlsTarget","useHover","ref","useRef","setHovered","useContext","context","onPointerOver","useCallback","state","current","onPointerOut","filter","mesh","Loading","Room","useState","hovered","setHover","group","nodes","useGLTF","useSpring","config","mass","tension","friction","precision","props","pos","visible","geometry","Default","rotation","receiveShadow","e","attach","toneMapped","transparent","Machine1","castShadow","roughness","Default_2","Machine2","Machine3","React","createContext","Outline","children","gl","scene","size","composer","aspect","useMemo","Vector2","width","height","useEffect","setSize","useFrame","render","Provider","value","args","attachArray","selectedObjects","visibleEdgeColor","edgeStrength","edgeThickness","edgeGlow","pulsePeriod","FXAAShader","App","option","setoption","cameraPos","markers","AnimatedNavigation","animated","AnimatedOrbitControls","OrbitControls","cachedPos","cachedTarget","target","autoRotate","cameraValues","setCameraValues","onNavigationItemClicked","spring","from","default","onChange","colorManagement","shadows","pixelRatio","window","devicePixelRatio","antialias","alpha","autoClear","clearDepth","linear","flat","logarithmicDepthBuffer","fov","far","near","onCreated","toneMapping","THREE","intensity","fallback","minPolarAngle","enableDamping","maxPolarAngle","Math","PI","minAzimuthAngle","minDistance","maxDistance","enableRotate","enableZoom","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f09f3e5.chunk.js","sourcesContent":["import { useThree } from \"react-three-fiber\";\n\nfunction Navigation({\n  cameraPosition,\n}: {\n  cameraPosition: [number, number, number];\n}) {\n\n  const { camera } = useThree();\n  camera.position.set(...cameraPosition);\n  return null;\n}\n\nexport default Navigation;","import React from \"react\";\nimport { Html } from \"@react-three/drei\";\n//import Nav from \"react-bootstrap/esm/Nav\";\n\nfunction Marker({\n  position,\n  name,\n  id,\n  color,\n  opacity,\n  onMarkerClicked,\n}: {\n  position: [number, number, number];\n  name: string;\n  id: number;\n  color: string;\n  opacity: number;\n  onMarkerClicked: (id: number) => void \n}) {\n\n  return (\n    <mesh position={position}>\n      <Html style={{\n        opacity: `${opacity}`\n      }} >\n        <div className=\"overlay\" onClick={() => onMarkerClicked(id)}>\n        {name}\n          {/* <div className=\"circle\">{name}</div> */}\n          {/* <div className=\"circle box\">{id}</div>\n          <div className=\"box\"> */}\n            {/* <Nav.Link className=\"text-overlay\">{name}</Nav.Link> */}\n          {/* </div>\n          */}\n        </div> \n      </Html>\n    </mesh>\n  );\n}\n\nexport default Marker;","import React, { useRef, Suspense, useEffect, useMemo, useState, useContext, useCallback } from \"react\"\nimport { Canvas, useFrame, extend, useThree } from \"react-three-fiber\";\nimport { Html, OrbitControls, PerspectiveCamera, useGLTF } from \"@react-three/drei\";\n\nimport { config } from 'react-spring'\nimport { useSpring, animated } from '@react-spring/three'\n\nimport Navigation from \"./Navigation\";\nimport Marker from \"./Marker\";\nimport \"./styles.css\";\n\nimport * as THREE from 'three'\nimport { Vector2 } from \"three\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { FXAAShader } from \"three/examples/jsm/shaders/FXAAShader\";\n\nextend({ EffectComposer, RenderPass, OutlinePass, ShaderPass })\n\n\n//custom cursor\n/* import DotRing from \"./components/DotRing/DotRing\";\nimport { MouseContext } from \"./context/mouse-context\"; */\n\n\n\nlet selectedItemIndex: number;\nlet opacityMachine1: 0.01;\n\nconst initialCameraPos: [number, number, number] = [-3, 2, 5];\nconst initialControlsTarget: [number, number, number] = [0, 0, 0];\n\n\n//mouse over for hightlighting 3D objects\nfunction useHover() {\n  const ref = useRef()\n  const setHovered = useContext(context)\n  const onPointerOver = useCallback(() => setHovered(state => [...state, ref.current]), [])\n  const onPointerOut = useCallback(() => setHovered(state => state.filter(mesh => mesh !== ref.current)), [])\n  return { ref, onPointerOver, onPointerOut }\n}\n\n\n\n\nfunction Loading() {\n  return (\n    <Html>\n    <p>Loading 3D Models...</p>\n    </Html>\n  );\n}\n\n\nfunction Room() {      \n\n  const [hovered, setHover] = useState(false)\n\n  const group = useRef();\n  const { nodes } = useGLTF(\"models/room.glb\");\n\n  const { color, pos, ...props } = useSpring({\n    /* color: active ? 'hotpink' : 'white',\n    pos: active ? [0, 0, 2] : [0, 0, 0],\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    rotation: active ? [THREE.Math.degToRad(180), 0, THREE.Math.degToRad(45)] : [0, 0, 0],\n    */\n    'material-opacity': hovered ? 0.9 : 1,\n    config: { mass: 10, tension: 1000, friction: 300, precision: 0.00001 } \n  })\n\n  return (\n    <group ref={group}\n    >\n      <animated.mesh visible geometry={nodes.Default.geometry} rotation={[0, 0, 0]}\n      receiveShadow position={[0, 0.002, 0]}\n      onPointerOver={e => setHover(true)} onPointerOut={e => setHover(false)} {...props}\n      > \n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"#358384\"\n          toneMapped={true}   \n          opacity={1}\n          transparent\n        />\n        \n      </animated.mesh>\n    </group>\n  );\n}\n\n\nconst Machine1 = ({ position, rotation, color }) => {\n  const group = useRef();\n  const { nodes } = useGLTF(\"models/machineModel.glb\");\n\n  return (\n    <group ref={group}\n    position={position} \n    rotation={rotation} \n    >\n      <mesh \n        visible \n        receiveShadow \n        castShadow\n        geometry={nodes.Default.geometry}  \n         /* onClick={e => {\n          if (colorIdx > 0) {\n            setColorIdx(0);\n          } else {\n            setColorIdx(colorIdx+1);\n          }\n        }} */\n        {...useHover()}\n        >\n        <meshLambertMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.9}\n          toneMapped={false} \n        />\n      </mesh>\n\n      <mesh \n        visible \n        ref={group}\n        geometry={nodes.Default_2.geometry}  \n        rotation={[0, 0, 0]}\n      >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.9}\n          toneMapped={false} \n        />\n      </mesh>\n\n    </group>\n  );\n}\n\n\nconst Machine2 = ({ position, rotation, color }) => {\n\n  const group = useRef();\n  const { nodes } = useGLTF(\"models/machineModel.glb\");\n\n  return (\n    <group ref={group}\n    position={position}\n    rotation={rotation}\n    > \n\n      <mesh \n        visible \n        receiveShadow \n        castShadow\n        geometry={nodes.Default.geometry}  \n        {...useHover()}\n        >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.8}\n          toneMapped={false} \n        />\n      </mesh>\n\n      <mesh \n        visible \n        ref={group}\n        geometry={nodes.Default_2.geometry}  \n        rotation={[0, 0, 0]}\n      >\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"red\"\n          roughness={0.01}\n          toneMapped={false} \n        />\n      </mesh>\n      \n    </group>\n  );\n}\n\n\nconst Machine3 = ({ position, rotation, color }) => {\n  const group = useRef();\n  const { nodes } = useGLTF(\"models/machineModel.glb\");\n\n  return (\n    <group ref={group}\n    position={position}\n    rotation={rotation}\n    > \n      <mesh \n        visible \n        receiveShadow \n        castShadow\n        geometry={nodes.Default.geometry}  \n        /* onClick={e => {\n          if (colorIdx > 0) {\n            setColorIdx(0);\n          } else {\n            setColorIdx(colorIdx+1);\n          }\n        }} */\n\n        {...useHover()}\n\n        >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.8}\n          toneMapped={false} \n        />\n      </mesh>\n\n      <mesh \n        visible \n        ref={group}\n        geometry={nodes.Default_2.geometry}  \n        rotation={[0, 0, 0]}\n      >\n        <meshStandardMaterial\n          attach=\"material\"\n          color={color}\n          roughness={0.01}\n          toneMapped={false} \n        />\n      </mesh>\n      \n    </group>\n  );\n}\n\n\n\n\nconst context = React.createContext()\nconst Outline = ({ children }) => {\n  const { gl, scene, camera, size } = useThree()\n  const composer = useRef()\n  const [hovered, set] = useState([])\n  const aspect = useMemo(() => new Vector2(size.width, size.height), [size])\n  useEffect(() => composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <context.Provider value={set}>\n      {children}\n      <effectComposer ref={composer} args={[gl]}>\n        <renderPass attachArray=\"passes\" args={[scene, camera]}/>\n        <outlinePass\n          attachArray=\"passes\"\n          args={[aspect, scene, camera]}\n          selectedObjects={hovered}\n          visibleEdgeColor=\"navy\"\n          edgeStrength={5}\n          edgeThickness={2.4}\n          edgeGlow={0.1}\n          pulsePeriod={4}\n        />\n        <shaderPass attachArray=\"passes\" args={[FXAAShader]} uniforms-resolution-value={[1 / size.width, 1 / size.height]} />\n      </effectComposer>\n    </context.Provider>\n  )\n}\n\n\n\n\n\n\nfunction App() {\n\n  const [option, setoption] = useState(\"true\")\n  const [markers] = useState<\n  Array<{\n    position: [number, number, number];\n    cameraPos: [number, number, number];\n    name: string;\n    color: string;\n    opacity: number;\n  }>\n  >([\n    {\n      position: [0, 0, 0],\n      cameraPos: [-3, 2, 5],\n      name: \"Default\",\n      color: \"white\",\n      opacity: opacityMachine1,\n    },\n    {\n      position: [-0.7, 0, -1.6],\n      cameraPos: [-1.1, 2, 5],\n      name: \"Machine 1\",\n      color: \"white\",\n      opacity: opacityMachine1,\n\n    },\n    {\n      position: [0.9, 0, -1.6],\n      cameraPos: [1, 1, 1],\n      name: \"Machine 2\",\n      color: \"white\",\n      opacity: 0.7,\n    },\n    {\n      position: [2.1, 0, 0.2],\n      cameraPos: [1, 0.5, 0.2],\n      name: \"Machine 3\",\n      color: \"white\",\n      opacity: 0.7,\n    }\n  ]);\n\n\n  const [isAnimating, setIsAnimating] = useState(false);\n  const AnimatedNavigation = animated(Navigation);\n  const AnimatedOrbitControls = animated(OrbitControls);\n\n  const [cameraValues, setCameraValues] = useState({\n    cachedPos: initialCameraPos,\n    cachedTarget: initialControlsTarget,\n    pos: initialCameraPos,\n    target: initialControlsTarget,\n    autoRotate: true\n  });\n  \n\n\n  function onNavigationItemClicked(id: number) {\n\n    markers[1].color = \"white\";\n    markers[2].color = \"white\";\n    markers[3].color = \"grey\";\n    \n    if (selectedItemIndex !== id && id >= 1)  {\n      selectedItemIndex = id;\n      setoption(id);\n      markers[selectedItemIndex].color = \"#414779\";\n\n      setCameraValues({\n        cachedPos: cameraValues.pos,\n        cachedTarget: cameraValues.cachedTarget,\n        pos: markers[selectedItemIndex].cameraPos,\n        target: markers[selectedItemIndex].position,\n        autoRotate: false\n      });\n\n    } else {\n      selectedItemIndex = id;\n      setoption(id);\n      markers[selectedItemIndex].color = \"#414779\";\n\n      setCameraValues({\n        cachedPos: cameraValues.pos,\n        cachedTarget: cameraValues.cachedTarget,\n        pos: markers[selectedItemIndex].cameraPos,\n        target: markers[selectedItemIndex].position,\n        autoRotate: true\n      });\n    }\n  }\n\n\n\n  \n\n  const spring = useSpring({\n    pos: cameraValues.pos,\n    target: cameraValues.target,\n    from: {\n      pos: cameraValues.cachedPos,\n      target: cameraValues.cachedTarget\n    },\n    //https://react-spring.io/common/configs\n    config: config.default,\n  });\n\n\n\n\n\n\n  return (\n\n    <div className=\"content\">\n\n      {/* <DotRing /> */}\n\n      <div className=\"ui\">\n\n          {/* top left side selector \"drop-down\" */}\n          <div>\n              {/* <h4>Selected view: {option}</h4>  */}\n              <select onChange={e => {setoption(e.target.value); onNavigationItemClicked(e.target.value)}} value={option}>\n                  <option value=\"0\">Default view</option>\n                  <option value=\"1\">Machine 1</option>\n                  <option value=\"2\">Machine 2</option>\n                  <option value=\"3\">Machine 3</option>\n              </select>\n          </div>\n\n      </div>  \n\n      <Canvas \n      colorManagement={true}\n      shadows \n      pixelRatio={window.devicePixelRatio}\n      gl={{ antialias: false, alpha: false, autoClear: true, clearDepth: true }}\n      linear\n      flat\n      camera={{ position: cameraValues.pos, logarithmicDepthBuffer: true, rotation: [0, 0, 0], fov: 5, far:1000, near:10 }}\n      onCreated={({ gl, scene }) => {\n        gl.toneMapping = THREE.LinearToneMapping\n        //gl.outputEncoding = THREE.GammaEncoding\n        //gl.gammaFactor = 33\n      }}\n      >\n\n        <color attach=\"background\" args={[\"#ffffff\"]} />\n\n        <AnimatedNavigation cameraPosition={spring.pos} />\n\n        <directionalLight\n            intensity={0.91}\n            castShadow\n            shadow-mapSize-height={512}\n            shadow-mapSize-width={512}\n            position={[0, 25, 8]}\n        />\n        <hemisphereLight intensity={0.41} position={[2, 10, 8]}/> \n        <ambientLight intensity={0.07} position={[0, 0, 0]}/>\n\n        <Suspense fallback={<Loading />}>\n\n            {/* old label 25-31aug\n            <Machine1 text={\"\"} position={markers[1].position} rotation={[0, 1.57, 0]} color={\"dimgrey\"}/>\n            */}   \n\n          <Room/>\n\n          <Outline>\n\n            <Machine1 position={[-0.7, 0, -1.6]} rotation={[0, 1.57, 0]} color={markers[1].color}/>\n\n            <Machine2 position={[0.9, 0, -1.6]} rotation={[0, 1.57, 0]} color={markers[2].color} />\n\n            <Machine3 position={[2.1, 0, 0.2]} rotation={[0, 0, 0]} color={markers[3].color} />\n\n          </Outline>\n\n\n\n\n          {/* {isAnimating ? null : (  */}\n          <group>\n\n            <Marker\n              position={markers[1].position}\n              name={markers[1].name}\n              id={1}\n              opacity={markers[1].opacity}\n              onMarkerClicked={onNavigationItemClicked}\n            />\n\n            <Marker\n              position={markers[2].position}\n              name={markers[2].name}\n              id={2}\n              opacity={markers[2].opacity}\n              onMarkerClicked={onNavigationItemClicked}\n            />\n            <Marker\n              position={markers[3].position}\n              name={markers[3].name}\n              id={3}\n              opacity={markers[3].opacity}\n              onMarkerClicked={onNavigationItemClicked}\n            />\n          </group>\n          {/* )}  */}\n\n\n          </Suspense>\n\n          <AnimatedOrbitControls\n          //autoRotate={cameraValues.autoRotate}\n          //autoRotateSpeed={0.2}\n          minPolarAngle={0}\n          enableDamping={false}\n          maxPolarAngle={Math.PI / 2}\n          minAzimuthAngle={-Math.PI / 32}\n          minDistance={18}\n          maxDistance={150}\n          target={spring.target}\n          enableRotate={cameraValues.autoRotate}\n          enableZoom={cameraValues.autoRotate}\n          />\n\n      </Canvas>\n  \n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  type Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  };\n  \n  export function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\n//import reportWebVitals from \"./reportWebVitals\";\n//import MouseContextProvider from \"./context/mouse-context\";\n\n\n\n\n//const rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    /*for custom \"circle\" cursor\n    <MouseContextProvider>\n      <App />\n    </MouseContextProvider>,*/\n    <App/>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n\n\n\n"],"sourceRoot":""}