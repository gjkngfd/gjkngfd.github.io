/**
 * Generated by Verge3D Puzzles v.2.17.1
 * Mon Feb 15 2021 19:04:01 GMT+0300 (MSK)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function() {
    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    

    
// loadFont puzzle
function loadFont(url, family) {

    if (!url || !family)
        return;

    // register in CSS
    var elemStyle = document.createElement('style');
    elemStyle.innerHTML = '@font-face { font-family: ' + family
        + '; src: url(' + url + '); }';
    document.body.appendChild(elemStyle);

    // preload font
    var elemDiv = document.createElement('div');
    elemDiv.innerHTML = 'invisible text';
    elemDiv.style.visibility = 'hidden';
    elemDiv.style.fontFamily = family;
    document.body.appendChild(elemDiv);
}



loadFont('font/COPRGTB.ttf', 'COPRGTB');

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}




// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "Scene" && obj.type !== "AmbientLight" &&
            obj.name !== "" && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj)
            obj.resolveMultiMaterial()[0].material = mat;
    }
}



eventHTMLElem('click', 'mirrors2', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});
eventHTMLElem('click', 'mirrors1', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});
eventHTMLElem('click', 'mirrors3', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});

eventHTMLElem('click', 'paint_work1', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});
eventHTMLElem('click', 'paint_work2', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});
eventHTMLElem('click', 'paint_work3', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_PaintWork', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Wheels', true);
});

eventHTMLElem('click', 'wheels1', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Wheels', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
});
eventHTMLElem('click', 'wheels2', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Wheels', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
});
eventHTMLElem('click', 'wheels3', true, function(event) {
  setHTMLElemStyle('display', 'block', 'center-bottom-area_Wheels', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_Mirrors', true);
  setHTMLElemStyle('display', 'none', 'center-bottom-area_PaintWork', true);
});

eventHTMLElem('click', 'circleRed', true, function(event) {
  assignMat('outside_low', 'outside_PBR_red');
});
eventHTMLElem('click', 'circleYellow', true, function(event) {
  assignMat('outside_low', 'outside_PBR_yellow');
});
eventHTMLElem('click', 'circleGray', true, function(event) {
  assignMat('outside_low', 'outside_PBR_gray');
});
eventHTMLElem('click', 'circleWhite', true, function(event) {
  assignMat('outside_low', 'outside_PBR');
});

eventHTMLElem('click', 'circleBlack_M', true, function(event) {
  assignMat('outside_low.003', 'mirrors');
});
eventHTMLElem('click', 'circleWhite_M', true, function(event) {
  assignMat('outside_low.003', 'mirrors.white');
});

eventHTMLElem('click', 'circleBlack_W', true, function(event) {
  assignMat('wheels', 'wheel_black');
});
eventHTMLElem('click', 'circleGold_W', true, function(event) {
  assignMat('wheels', 'wheel_gold');
});
eventHTMLElem('click', 'circleGray_W', true, function(event) {
  assignMat('wheels', 'wheel_gray');
});

eventHTMLElem('click', 'world_dark', true, function(event) {
  assignMat('sphere_studio', 'ground.002');
});
eventHTMLElem('click', 'world_light', true, function(event) {
  assignMat('sphere_studio', 'ground.001');
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
